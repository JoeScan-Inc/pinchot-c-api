diff --git a/cpp/thirdparty/boost-1.70.0/boost/property_tree/ini_parser.hpp b/cpp/thirdparty/boost-1.70.0/boost/property_tree/ini_parser.hpp
index 50d3c97f6..3fd0d1e88 100644
--- a/cpp/thirdparty/boost-1.70.0/boost/property_tree/ini_parser.hpp
+++ b/cpp/thirdparty/boost-1.70.0/boost/property_tree/ini_parser.hpp
@@ -60,11 +60,15 @@ namespace boost { namespace property_tree { namespace ini_parser
      * @throw ini_parser_error If a format violation is found.
      * @param stream Stream from which to read in the property tree.
      * @param[out] pt The property tree to populate.
+     * @param fileSize End reading from the stream after this many bytes.
+     *                 Pass in a 0 to ignore this check.
+     *
+     * @note JoeScan Modification: Added `fileSize` param
      */
     template<class Ptree>
     void read_ini(std::basic_istream<
                     typename Ptree::key_type::value_type> &stream,
-                  Ptree &pt)
+                  Ptree &pt, unsigned int fileSize = 0)
     {
         typedef typename Ptree::key_type::value_type Ch;
         typedef std::basic_string<Ch> Str;
@@ -75,6 +79,7 @@ namespace boost { namespace property_tree { namespace ini_parser
 
         Ptree local;
         unsigned long line_no = 0;
+        unsigned long char_count = 0;
         Ptree *section = 0;
         Str line;
 
@@ -85,6 +90,9 @@ namespace boost { namespace property_tree { namespace ini_parser
             // Get line from stream
             ++line_no;
             std::getline(stream, line);
+
+            char_count += line.length() + 1; // +1 for the newline
+
             if (!stream.good() && !stream.eof())
                 BOOST_PROPERTY_TREE_THROW(ini_parser_error(
                     "read error", "", line_no));
@@ -135,6 +143,10 @@ namespace boost { namespace property_tree { namespace ini_parser
                     container.push_back(std::make_pair(key, Ptree(data)));
                 }
             }
+
+            if ((0 != fileSize) && (char_count >= fileSize)) {
+                break;
+            }
         }
         // If the last section was empty, drop it again.
         if (section && section->empty())
@@ -142,7 +154,6 @@ namespace boost { namespace property_tree { namespace ini_parser
 
         // Swap local ptree with result ptree
         pt.swap(local);
-
     }
 
     /**
